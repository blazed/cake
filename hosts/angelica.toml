system = "x86_64-linux"

[config]
publicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICcPgR1IDyaKKQECpqdoesNahtMWQYi2P0m0FoodPm5d"

profiles = [
  "profiles/hardware/intel",
  "profiles/unencrypted_fs",
  "profiles/hetzner_cloud",
  "profiles/k3s",
  "profiles/server",
  "profiles/state",
]

users.groups.blazed.gid = 1447
users.users.blazed.uid = 1447
users.users.blazed.hashedPassword = "$6$HST/IcrwobvqZd$8D7oml6RozVpXaAw/WjjcYJOfSd7HJ2DqC6jNrEBKs5bz7t0O7EgrYj33XBTcrAbOgsn3T2PS4ofd8S77Jc8X0"
users.users.blazed.openssh.authorizedKeys.keys = [
  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC7jrwDFcxP329CNp2kUlGH3cvvrY5DHTJdB6ZsjhpnK1yEVpRrG87TOkxrdBOX+s8bVL/8vR3xgvkaKl67zav9JG1xk9HOYKnAHJ7laLX0WJSHsdL9MHblUbVHnn7rXXQvzwmTUacQlF8h8LiTfGAcSNmj9hrehOzkU1v+mpeOsga7yAMuJWI1Tb7AJ+gzHO/72dEeA5VG0JC43KGMW4yYd12pG/58d9RkaT0Et/rXK7zpYhzaPSl1JlCxYYl12OcjQCoWTz5Bq5jS2cW5dup6/N6kuGdanTGxI4yUIWlUyLPjHUZ5g7EcyBuAE2/v33QUFiwhQjNvHdvhoaoil/T1hye2YJfZ6i+ghrN+jW4Prw2znZ+txRhFlIIXmeEMCBN4aLx5oTWH6qXHRGYjCSPhoU+P8jcagBKTApC0gzNK8jH4nJ8VhGs+g+N2337u5pjjCy9IAN9E8wiODgAvsButF+dFkHXEEzJ9pOrin4/MFUpVQklFwVTTCYP2mXa66zkI+JqoTNCkY5uJPxraxKdq0+0aWjh3KApr5vGA6ZFbkHX3tZdOAWTFZkM46Z3ZxohzWJfJg+eLyAmBbRjJjYU6X5lvb697aksAaqjV2NlkEBxmQTFf9QgrrzfTQubP1Nxj1wnrJd/ytofMIiVMVZ5JLAVIatetV9ZICmxF4j6Tiw== cardno:000606444817",
  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDDd9ZjCyGAjtjM6lCVZ46+c3PZvYDzFxECpa3NRwZG8zGnPcbIsFIyQzOdk0eywHFZikNeTxxxiDYXeTnuHuMkweVw5mYIwb8hXj8ts7qoCOVJP9P+KnnEb4WS/edG+Arv1nVeNIXswjHKjOtUSRtoNlRuY0x4kyF9EAbVTrHrB5HDtr7GTGQAGAEp33jQqHrIqFoWmNm9GQ3jqP0b4AcZVRXjAj+amqUQ2+gRt4r1r1kzLuvmOrTbOxnNB/N2hGNCkTbIqP1tDVq03EY0ISOWG+1+TW79ASkSYIdnmQBoB+x6Eh+9CGe65wjM0Op3Q564ZS3Qde1GzMchx5A4W7rrMAOzLXJaQ8Mi7gjsDjrqxBfDDXUU5JL5xn0PhhI1teXvQ5aR90cSs424PS3Yrbqs/pHsybcB/kh25MlO9rGXA9MHh7LlVCPIvus/SDopVgTgNIvhYbQh9xdogkG1XdkvyzXmvAJ6Gk/TR/KRWURwQyp1WJxJ8nHr/zUWrU55zXrN/5gWbDB5k9zuR5G4EGrZshM3EuNeQtjMlHcLWfoZuwaOmar/NOmaXzrBCZb/jXNhQkh6M94krXWE0DIkwsu+5n14llMo/OCxneIEqx4FqZePC8x8qpqfKRzSetOG5PVdCO/8w1erhkg8uETguiPTK4uCfCgtZ75ISpv+7nEwuQ== cardno:000607191648",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAICCghZ9Q+hC3hwCS8R6KdqQ8RefZgadLQUYC7upCejNCAAAABHNzaDo=",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIH8FItRsdPvpg8mTCF7gsKQJ4ABaOCE8a6PzamumRWe3AAAABHNzaDo=",
]

age.secrets.k3s-token.file = "secrets/k3s/token.age"
age.secrets.wg-innernet.file = "secrets/angelica/wg-innernet.age"

age.secrets.argocd-vault-sercet = { file = "secrets/k3s/argocd-vault-secret.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/argocd-vault-secret.yaml" }
age.secrets.argocd-cm = { file = "secrets/k3s/argocd-cm.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/argocd-cm.yaml" }
age.secrets.argocd-repositories = { file = "secrets/k3s/argocd-repositories.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/argocd-repositories.yaml" }

networking.firewall.trustedInterfaces = [ "exsules" ]

services.innernet.server.exsules.enable = true
services.innernet.server.exsules.settings.openFirewall = true
services.innernet.server.exsules.settings.cidr = "10.0.152.0/22"
services.innernet.server.exsules.settings.listenPort = 51820
services.innernet.server.exsules.settings.privateKeyFile = "/run/agenix/wg-innernet"
services.innernet.server.exsules.settings.publicKey = "FgVMLRimgGBDqD6bZLwIFar0WllKZwamkOCE7PGeMXs="
services.innernet.server.exsules.settings.externalEndpoint = "65.108.84.164:51820"

services.innernet.server.exsules.settings.cidrs.home.cidr = "10.0.153.0/26"
services.innernet.server.exsules.settings.cidrs.home.parent = "exsules"

services.innernet.server.exsules.settings.peers.diana.ip = "10.0.153.3"
services.innernet.server.exsules.settings.peers.diana.cidr = "home"
services.innernet.server.exsules.settings.peers.diana.publicKey = "sFiCyanPnKKhK5tL0L+l2ew0USq3BkU8SROv0oIQVA4="
services.innernet.server.exsules.settings.peers.diana.isAdmin = true

services.innernet.server.exsules.settings.peers.nicolina.ip = "10.0.153.6"
services.innernet.server.exsules.settings.peers.nicolina.cidr = "home"
services.innernet.server.exsules.settings.peers.nicolina.publicKey = "08ZvGL46b+TuMFO/ys8q6S3KADctaFitWLkyW+SUWRI="
services.innernet.server.exsules.settings.peers.nicolina.isAdmin = true

services.innernet.server.exsules.settings.peers.sophia.ip = "10.0.153.20"
services.innernet.server.exsules.settings.peers.sophia.cidr = "home"
services.innernet.server.exsules.settings.peers.sophia.publicKey = "HxUxKi3BGYEVwuwuT/R+eGCdFtl0hktbiewr93UL5lA="

services.innernet.server.exsules.settings.peers.elsa.ip = "10.0.153.21"
services.innernet.server.exsules.settings.peers.elsa.cidr = "home"
services.innernet.server.exsules.settings.peers.elsa.publicKey = "S7cbuWJvDYznxAtbqOZyKvvC//fQuciKbOqpTV18Cx4="

services.innernet.server.exsules.settings.peers.freja.ip = "10.0.153.22"
services.innernet.server.exsules.settings.peers.freja.cidr = "home"
services.innernet.server.exsules.settings.peers.freja.publicKey = "LxGKvmlRmvgR/DVyzS6OYom/vj1JZdBQPhxUVjdn6HY="

services.k3s.role = "server"
services.k3s.tokenFile = "/run/agenix/k3s-token"
services.k3s.settings.cluster-cidr = "10.244.0.0/16"
services.k3s.settings.service-cidr = "10.96.0.0/12"
services.k3s.settings.cluster-dns = "10.96.0.10"
services.k3s.settings.node-ip = "10.0.152.1"
services.k3s.settings.node-external-ip = "65.108.84.164"
services.k3s.settings.advertise-address = "10.0.152.1"
services.k3s.settings.flannel-iface = "exsules"
services.k3s.settings.kube-controller-manager-arg.node-cidr-mask-size = 24
services.k3s.after = [ "innernet-server-exsules.service" ]
services.k3s.settings.node-label."svccontroller.k3s.cattle.io/enablelb" = "true"
services.k3s.settings.node-label."topology.kubernetes.io/region" = "finland"
services.k3s.settings.node-label."topology.kubernetes.io/zone" = "hetzner"

services.k3s.settings.secrets-encryption = true

services.k3s.autoDeploy.kured = "pkg:kured-yaml/kured.yaml"
services.k3s.autoDeploy.argocd = "pkg:argocd-yaml/argocd.yaml"

services.k3s.autoDeploy.kiali-helm-repo.apiVersion = "v1"
services.k3s.autoDeploy.kiali-helm-repo.kind = "Secret"
services.k3s.autoDeploy.kiali-helm-repo.type = "Opaque"
services.k3s.autoDeploy.kiali-helm-repo.metadata.name = "kiali-helm-repo"
services.k3s.autoDeploy.kiali-helm-repo.metadata.namespace = "argocd"
services.k3s.autoDeploy.kiali-helm-repo.metadata.labels."argocd.argoproj.io/secret-type" = "repository"
services.k3s.autoDeploy.kiali-helm-repo.stringData = { name = "kiali", project = "sre-dev", type = "helm", url = "https://kiali.org/helm-charts" }

services.k3s.autoDeploy.sre-dev-project.apiVersion = "argoproj.io/v1alpha1"
services.k3s.autoDeploy.sre-dev-project.kind = "AppProject"
services.k3s.autoDeploy.sre-dev-project.metadata.name = "sre-dev"
services.k3s.autoDeploy.sre-dev-project.metadata.namespace = "argocd"
services.k3s.autoDeploy.sre-dev-project.finalizers = [ "resources-finalizer.argocd.argoproj.io" ]
services.k3s.autoDeploy.sre-dev-project.spec.sourceRepos = [ "https://github.com/exsules/gitops.git" ]
services.k3s.autoDeploy.sre-dev-project.spec.clusterResourceWhitelist = [
  { group = "*", kind = "*" }
]
services.k3s.autoDeploy.sre-dev-project.spec.destinations = [
  { namespace = "*", server = "https://kubernetes.default.svc" }
]
services.k3s.autoDeploy.sre-dev-project.spec.namespaceResourceWhitelist = [
  { group = "*", kind = "*" }
]

services.k3s.autoDeploy.exsules-dev-project.apiVersion = "argoproj.io/v1alpha1"
services.k3s.autoDeploy.exsules-dev-project.kind = "AppProject"
services.k3s.autoDeploy.exsules-dev-project.metadata.name = "exsules-dev"
services.k3s.autoDeploy.exsules-dev-project.metadata.namespace = "argocd"
services.k3s.autoDeploy.exsules-dev-project.finalizers = [ "resources-finalizer.argocd.argoproj.io" ]
services.k3s.autoDeploy.exsules-dev-project.spec.sourceRepos = [ "https://github.com/exsules/gitops.git" ]
services.k3s.autoDeploy.exsules-dev-project.spec.clusterResourceWhitelist = [
  { group = "*", kind = "*" }
]
services.k3s.autoDeploy.exsules-dev-project.spec.destinations = [
  { namespace = "api-security", server = "https://kubernetes.default.svc" },
  { namespace = "exsules-dev", server = "https://kubernetes.default.svc" }
]
services.k3s.autoDeploy.exsules-dev-project.spec.namespaceResourceWhitelist = [
  { group = "*", kind = "*" }
]

system.autoUpgrade = { enable = true, flake = "github:blazed/cake", allowReboot = true, dates = "*:0/15", randomizedDelaySec = "5min", enableSentinel = true }
